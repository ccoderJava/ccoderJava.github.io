(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{486:function(_,a,t){"use strict";t.r(a);var v=t(9),r=Object(v.a)({},(function(){var _=this,a=_.$createElement,t=_._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h2",{attrs:{id:"_1-介绍一下你在公司的职能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-介绍一下你在公司的职能"}},[_._v("#")]),_._v(" 1.介绍一下你在公司的职能")]),_._v(" "),t("p",[_._v("方面面试官了解目前岗位职能，日常工作(业务+技术点)")]),_._v(" "),t("h2",{attrs:{id:"_2-介绍一个你觉得最有价值的项目"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-介绍一个你觉得最有价值的项目"}},[_._v("#")]),_._v(" 2.介绍一个你觉得最有价值的项目")]),_._v(" "),t("h3",{attrs:{id:"_2-1-业务层面介绍-业务栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-业务层面介绍-业务栈"}},[_._v("#")]),_._v(" 2.1 业务层面介绍(业务栈)")]),_._v(" "),t("h3",{attrs:{id:"_2-2-技术层面介绍-技术栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-技术层面介绍-技术栈"}},[_._v("#")]),_._v(" 2.2 技术层面介绍(技术栈)")]),_._v(" "),t("p",[_._v("这里可以引入自己非常熟悉的知识点，引导面试官下一个问题往这上面提问。")]),_._v(" "),t("h2",{attrs:{id:"_3-前面引入-分布式事务在业务上如何落地的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-前面引入-分布式事务在业务上如何落地的"}},[_._v("#")]),_._v(" 3.(前面引入)分布式事务在业务上如何落地的")]),_._v(" "),t("h2",{attrs:{id:"_4-前面引入-redis和db一致性问题的解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-前面引入-redis和db一致性问题的解决方案"}},[_._v("#")]),_._v(" 4.(前面引入)Redis和DB一致性问题的解决方案")]),_._v(" "),t("blockquote",[t("ul",[t("li",[t("a",{attrs:{href:"https://www.its404.com/article/alionsss/107451485",target:"_blank",rel:"noopener noreferrer"}},[_._v("分布式缓存一致性"),t("OutboundLink")],1)])])]),_._v(" "),t("h3",{attrs:{id:"_4-1-缓存读写策略"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-缓存读写策略"}},[_._v("#")]),_._v(" 4.1 缓存读写策略")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Cache Aside Pattern（旁路缓存模式)")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("读")]),_._v(" "),t("p",[_._v("读Cache,存在直接返回,不存在再从DB中读取并且放回Cache")])]),_._v(" "),t("li",[t("p",[_._v("写")]),_._v(" "),t("p",[_._v("先更新DB,然后直接删除Cache")])])])]),_._v(" "),t("li",[t("p",[_._v("Read/Write Through Pattern（读写穿透）")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("读")]),_._v(" "),t("p",[_._v("读Cache,存在直接返回,不存在再从DB中读取并且放回Cache")])]),_._v(" "),t("li",[t("p",[_._v("写")]),_._v(" "),t("p",[_._v("读Cache,不存在时直接更新DB。存在时更新Cache,然后进行Cache和DB同步更新。")])])])]),_._v(" "),t("li",[t("p",[_._v("Write Behind Pattern（异步缓存写入)")]),_._v(" "),t("p",[_._v("和读写穿透很相似,都是由Cache负责Cache和DB的读写更新.读写穿透是同步更新Cache和DB,但是异步缓存写入是只更新Cache,不直接更新DB,才用异步批量的方式更新DB。")]),_._v(" "),t("p",[_._v("此方式适合一些写入频繁，但是数据一致性要求不高场景。")])])]),_._v(" "),t("h3",{attrs:{id:"_4-2-cache和db操作顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-cache和db操作顺序"}},[_._v("#")]),_._v(" 4.2 Cache和DB操作顺序")]),_._v(" "),t("ul",[t("li",[_._v("先更新Cache,再更新DB")])]),_._v(" "),t("p",[_._v("无法保证两次更新均成功,可能存在缓存中为新数据,但DB中仍然是旧数据")]),_._v(" "),t("ul",[t("li",[_._v("先更新DB,再更新缓存")])]),_._v(" "),t("p",[_._v("并发情况下两个线程进行操作可能导致Cache和DB数据不一致问题。")]),_._v(" "),t("blockquote",[t("p",[_._v("假设请求 A 先操作数据库，请求 B 后操作数据库，但是可能存在请求 B 先写缓存，请求 A 后写缓存的情况，从而导致数据库与缓存之间的数据不一致。")])]),_._v(" "),t("ul",[t("li",[_._v("先写DB,再删除Cache")])]),_._v(" "),t("p",[_._v("业务如何保证写DB和删除Cache为原子操作,否则会出现写入DB但是Cache未做删除操作，导致数据一致性问题。")]),_._v(" "),t("blockquote",[t("ul",[t("li",[_._v("请求1从DB中读取数据A数据")]),_._v(" "),t("li",[_._v("请求2写操作更新DB中A数据,并且删除Cache中A数据")]),_._v(" "),t("li",[_._v("请求1将数据A写入Cache")])])]),_._v(" "),t("ul",[t("li",[_._v("先删除Cache,再更新DB")])]),_._v(" "),t("p",[_._v("先删Cache,在写入DB之前，若有另外请求读取Cache未命中时,读取DB中‘旧’值将其更新回Cache,此时Cache中为旧值,DB中为新值。")]),_._v(" "),t("blockquote",[t("ul",[t("li",[_._v("请求1将Cache中数据A删除")]),_._v(" "),t("li",[_._v("请求2从Cache中读取A数据时未命中,查询DB并将其回写到Cache中")]),_._v(" "),t("li",[_._v("请求1继续将DB中A数据更新")])])]),_._v(" "),t("h3",{attrs:{id:"_4-3-保证一致性解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-保证一致性解决方案"}},[_._v("#")]),_._v(" 4.3 保证一致性解决方案")]),_._v(" "),t("ul",[t("li",[_._v("采用延时双删策略")]),_._v(" "),t("li",[_._v("异步更新缓存策略(订阅binlog的同步机制)")]),_._v(" "),t("li",[_._v("混合存储优化方案")])]),_._v(" "),t("h2",{attrs:{id:"_5-说一个你最了解中间件-dubbo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-说一个你最了解中间件-dubbo"}},[_._v("#")]),_._v(" 5.说一个你最了解中间件(Dubbo)")]),_._v(" "),t("h3",{attrs:{id:"_5-1-dubbo设计观念-插件-微内核"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-dubbo设计观念-插件-微内核"}},[_._v("#")]),_._v(" 5.1 Dubbo设计观念(插件+微内核)")]),_._v(" "),t("h3",{attrs:{id:"_5-2-spi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-spi"}},[_._v("#")]),_._v(" 5.2 SPI")]),_._v(" "),t("h3",{attrs:{id:"_5-3-rpc调用原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-rpc调用原理"}},[_._v("#")]),_._v(" 5.3 RPC调用原理")]),_._v(" "),t("h3",{attrs:{id:"_5-4-dubbo序列化方式是否存在问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-dubbo序列化方式是否存在问题"}},[_._v("#")]),_._v(" 5.4 Dubbo序列化方式是否存在问题")]),_._v(" "),t("h2",{attrs:{id:"_6-解决的生产问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-解决的生产问题"}},[_._v("#")]),_._v(" 6.解决的生产问题")]),_._v(" "),t("h3",{attrs:{id:"_6-1-dubbo的热加载问题-版本bug"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-dubbo的热加载问题-版本bug"}},[_._v("#")]),_._v(" 6.1 Dubbo的热加载问题(版本bug)")]),_._v(" "),t("h3",{attrs:{id:"_6-2-单号生成方式导致问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-单号生成方式导致问题"}},[_._v("#")]),_._v(" 6.2 单号生成方式导致问题")]),_._v(" "),t("p",[_._v("这个问题可以引入分布式下单号生成的几种方案。")]),_._v(" "),t("h2",{attrs:{id:"_7-消息队列是怎么使用的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-消息队列是怎么使用的"}},[_._v("#")]),_._v(" 7.消息队列是怎么使用的")]),_._v(" "),t("h3",{attrs:{id:"_7-1-推拉模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-1-推拉模式"}},[_._v("#")]),_._v(" 7.1 推拉模式")]),_._v(" "),t("p",[_._v("消息队列核心应用场景:削峰、异步和解耦。那么在消息队列中消息模式有推拉模式。")]),_._v(" "),t("ul",[t("li",[t("p",[_._v("Push模式")]),_._v(" "),t("p",[_._v("Push模式是服务端根据用户需要，有目的、定时将数据推送到客户端。")]),_._v(" "),t("ul",[t("li",[_._v("[优点]对客户端要求第,方便客户端获取数据。")]),_._v(" "),t("li",[_._v("[优点]及时性好，服务端及时向客户端推送消息，吞吐量大。")]),_._v(" "),t("li",[_._v("[缺点]不能够保证发送成功,push采用广播模式")]),_._v(" "),t("li",[_._v("[缺点]没有消息状态跟踪，客户端是否成功接收到信息无法得知，存在消息丢失问题。")]),_._v(" "),t("li",[_._v("[缺点]针对性差,无法满足客户端定制化需求。")]),_._v(" "),t("li",[_._v("[缺点]客户端消费能力弱时，容易造成消息对接")])])]),_._v(" "),t("li",[t("p",[_._v("Pull模式")]),_._v(" "),t("p",[_._v("客户端主动向服务端获取信息。")]),_._v(" "),t("ul",[t("li",[_._v("[优点]针对性强，可满足客户端定制化需求。")]),_._v(" "),t("li",[_._v("[优点]信息传输量小,该次网络请求中只有客户端请求和服务端响应数据")]),_._v(" "),t("li",[_._v("[优点]服务端压力较小,只是被动地响应客户端请求。客户端根据自身消费能力拉取。")]),_._v(" "),t("li",[_._v("[缺点]实时性较差,对于服务端实时更新数据客户端无法感知,无法获得实时数据")]),_._v(" "),t("li",[_._v("[缺点]对客户端要求较高")])])])]),_._v(" "),t("h3",{attrs:{id:"_7-2-消息丢失问题-分布式事务、本地消息表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-2-消息丢失问题-分布式事务、本地消息表"}},[_._v("#")]),_._v(" 7.2 消息丢失问题(分布式事务、本地消息表)")]),_._v(" "),t("h3",{attrs:{id:"_7-3-用过几种消息队列-如果用过可以拓展比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-3-用过几种消息队列-如果用过可以拓展比较"}},[_._v("#")]),_._v(" 7.3 用过几种消息队列(如果用过可以拓展比较)")]),_._v(" "),t("h2",{attrs:{id:"_8-看过哪些中间件源码-dubbo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-看过哪些中间件源码-dubbo"}},[_._v("#")]),_._v(" 8.看过哪些中间件源码(Dubbo)")]),_._v(" "),t("h2",{attrs:{id:"_9-对公司的整体技术架构的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-对公司的整体技术架构的理解"}},[_._v("#")]),_._v(" 9.对公司的整体技术架构的理解")]),_._v(" "),t("h2",{attrs:{id:"_10-职业发展规划"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-职业发展规划"}},[_._v("#")]),_._v(" 10.职业发展规划")]),_._v(" "),t("h2",{attrs:{id:"_11-为什么要离职"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-为什么要离职"}},[_._v("#")]),_._v(" 11.为什么要离职")])])}),[],!1,null,null,null);a.default=r.exports}}]);