(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{497:function(a,t,r){"use strict";r.r(t);var s=r(9),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"jvm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),r("h3",{attrs:{id:"堆空间为什么要分代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#堆空间为什么要分代"}},[a._v("#")]),a._v(" 堆空间为什么要分代")]),a._v(" "),r("h3",{attrs:{id:"gc安全点和安全区域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gc安全点和安全区域"}},[a._v("#")]),a._v(" GC安全点和安全区域")]),a._v(" "),r("h3",{attrs:{id:"垃圾回收触发时机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收触发时机"}},[a._v("#")]),a._v(" 垃圾回收触发时机")]),a._v(" "),r("ul",[r("li",[a._v("Minor GC")]),a._v(" "),r("li",[a._v("Major GC")]),a._v(" "),r("li",[a._v("Full GC")])]),a._v(" "),r("h3",{attrs:{id:"类加载过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类加载过程"}},[a._v("#")]),a._v(" 类加载过程")]),a._v(" "),r("h3",{attrs:{id:"垃圾回收"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[a._v("#")]),a._v(" 垃圾回收")]),a._v(" "),r("h4",{attrs:{id:"对象生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象生命周期"}},[a._v("#")]),a._v(" 对象生命周期")]),a._v(" "),r("h4",{attrs:{id:"垃圾回收算法-标记清除、标记复制、标记清除整理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法-标记清除、标记复制、标记清除整理"}},[a._v("#")]),a._v(" 垃圾回收算法(标记清除、标记复制、标记清除整理)")]),a._v(" "),r("h4",{attrs:{id:"垃圾回收器-parallel、cms、g1等"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器-parallel、cms、g1等"}},[a._v("#")]),a._v(" 垃圾回收器(Parallel、CMS、G1等)")]),a._v(" "),r("h4",{attrs:{id:"垃圾回收过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收过程"}},[a._v("#")]),a._v(" 垃圾回收过程")]),a._v(" "),r("h3",{attrs:{id:"方法区演进-分jdk版本"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法区演进-分jdk版本"}},[a._v("#")]),a._v(" 方法区演进(分JDK版本)")]),a._v(" "),r("h3",{attrs:{id:"虚拟机栈的理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机栈的理解"}},[a._v("#")]),a._v(" 虚拟机栈的理解")]),a._v(" "),r("h3",{attrs:{id:"栈帧原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈帧原理"}},[a._v("#")]),a._v(" 栈帧原理")]),a._v(" "),r("h3",{attrs:{id:"栈帧组成结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#栈帧组成结构"}},[a._v("#")]),a._v(" 栈帧组成结构")]),a._v(" "),r("h3",{attrs:{id:"对象怎么定位-句柄访问、-hotspot-直接指针"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#对象怎么定位-句柄访问、-hotspot-直接指针"}},[a._v("#")]),a._v(" 对象怎么定位(句柄访问、(HotSpot)直接指针)")]),a._v(" "),r("h3",{attrs:{id:"unsafe类介绍"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unsafe类介绍"}},[a._v("#")]),a._v(" Unsafe类介绍")]),a._v(" "),r("h3",{attrs:{id:"逃逸分析的作用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#逃逸分析的作用"}},[a._v("#")]),a._v(" 逃逸分析的作用")]),a._v(" "),r("h3",{attrs:{id:"cglib和jdk动态代理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cglib和jdk动态代理"}},[a._v("#")]),a._v(" cglib和JDK动态代理")]),a._v(" "),r("h3",{attrs:{id:"动态代理实现原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态代理实现原理"}},[a._v("#")]),a._v(" 动态代理实现原理")]),a._v(" "),r("h3",{attrs:{id:"java的tlab-thread-local-allocation-buffer"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java的tlab-thread-local-allocation-buffer"}},[a._v("#")]),a._v(" Java的TLAB(Thread Local Allocation Buffer)")]),a._v(" "),r("h3",{attrs:{id:"oom异常排查方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#oom异常排查方式"}},[a._v("#")]),a._v(" OOM异常排查方式")])])}),[],!1,null,null,null);t.default=e.exports}}]);