(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{494:function(a,t,r){"use strict";r.r(t);var s=r(9),e=Object(s.a)({},(function(){var a=this,t=a.$createElement,r=a._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"java"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java"}},[a._v("#")]),a._v(" Java")]),a._v(" "),r("h3",{attrs:{id:"hashmap扩容机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap扩容机制"}},[a._v("#")]),a._v(" HashMap扩容机制")]),a._v(" "),r("h3",{attrs:{id:"hashmap无法保证线程安全的原因"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#hashmap无法保证线程安全的原因"}},[a._v("#")]),a._v(" HashMap无法保证线程安全的原因")]),a._v(" "),r("h3",{attrs:{id:"avl树和红黑树比较"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#avl树和红黑树比较"}},[a._v("#")]),a._v(" AVL树和红黑树比较")]),a._v(" "),r("h3",{attrs:{id:"concurrenthashmap-如何保证线程安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-如何保证线程安全"}},[a._v("#")]),a._v(" ConcurrentHashMap 如何保证线程安全")]),a._v(" "),r("ul",[r("li",[a._v("CAS Synchronized")]),a._v(" "),r("li",[a._v("Segment ReentrantLock")])]),a._v(" "),r("h3",{attrs:{id:"优先队列priorityqueue的原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优先队列priorityqueue的原理"}},[a._v("#")]),a._v(" 优先队列PriorityQueue的原理")]),a._v(" "),r("h3",{attrs:{id:"linkedtransferqueue和synchronousqueue区别"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linkedtransferqueue和synchronousqueue区别"}},[a._v("#")]),a._v(" LinkedTransferQueue和SynchronousQueue区别")]),a._v(" "),r("h3",{attrs:{id:"concurrentskiplistmap跳表"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#concurrentskiplistmap跳表"}},[a._v("#")]),a._v(" ConcurrentSkipListMap跳表")]),a._v(" "),r("h3",{attrs:{id:"阻塞队列的有界和无界"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列的有界和无界"}},[a._v("#")]),a._v(" 阻塞队列的有界和无界")]),a._v(" "),r("h3",{attrs:{id:"bio、nio、aio"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bio、nio、aio"}},[a._v("#")]),a._v(" BIO、NIO、AIO")]),a._v(" "),r("h3",{attrs:{id:"final关键字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#final关键字"}},[a._v("#")]),a._v(" final关键字")]),a._v(" "),r("h3",{attrs:{id:"volatile关键字"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#volatile关键字"}},[a._v("#")]),a._v(" volatile关键字")]),a._v(" "),r("h3",{attrs:{id:"tomcat为什么要重写类加载器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#tomcat为什么要重写类加载器"}},[a._v("#")]),a._v(" Tomcat为什么要重写类加载器")]),a._v(" "),r("ul",[r("li",[r("strong",[a._v("无法实现隔离性")])]),a._v(" "),r("li",[r("strong",[a._v("无法实现热替换")])]),a._v(" "),r("li",[r("strong",[a._v("如何打破双亲委派模型")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);